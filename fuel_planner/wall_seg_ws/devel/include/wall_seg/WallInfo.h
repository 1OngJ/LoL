// Generated by gencpp from file wall_seg/WallInfo.msg
// DO NOT EDIT!


#ifndef WALL_SEG_MESSAGE_WALLINFO_H
#define WALL_SEG_MESSAGE_WALLINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace wall_seg
{
template <class ContainerAllocator>
struct WallInfo_
{
  typedef WallInfo_<ContainerAllocator> Type;

  WallInfo_()
    : header()
    , wall_id(0)
    , corner_position()
    , angle(0.0)
    , centroid()
    , normal()
    , min()
    , max()  {
    }
  WallInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , wall_id(0)
    , corner_position(_alloc)
    , angle(0.0)
    , centroid(_alloc)
    , normal(_alloc)
    , min(_alloc)
    , max(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _wall_id_type;
  _wall_id_type wall_id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _corner_position_type;
  _corner_position_type corner_position;

   typedef double _angle_type;
  _angle_type angle;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _centroid_type;
  _centroid_type centroid;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _normal_type;
  _normal_type normal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _min_type;
  _min_type min;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _max_type;
  _max_type max;





  typedef boost::shared_ptr< ::wall_seg::WallInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wall_seg::WallInfo_<ContainerAllocator> const> ConstPtr;

}; // struct WallInfo_

typedef ::wall_seg::WallInfo_<std::allocator<void> > WallInfo;

typedef boost::shared_ptr< ::wall_seg::WallInfo > WallInfoPtr;
typedef boost::shared_ptr< ::wall_seg::WallInfo const> WallInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wall_seg::WallInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wall_seg::WallInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wall_seg::WallInfo_<ContainerAllocator1> & lhs, const ::wall_seg::WallInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.wall_id == rhs.wall_id &&
    lhs.corner_position == rhs.corner_position &&
    lhs.angle == rhs.angle &&
    lhs.centroid == rhs.centroid &&
    lhs.normal == rhs.normal &&
    lhs.min == rhs.min &&
    lhs.max == rhs.max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wall_seg::WallInfo_<ContainerAllocator1> & lhs, const ::wall_seg::WallInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wall_seg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wall_seg::WallInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wall_seg::WallInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wall_seg::WallInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wall_seg::WallInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wall_seg::WallInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wall_seg::WallInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wall_seg::WallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94095140c7fde5508eeca8261235bdf7";
  }

  static const char* value(const ::wall_seg::WallInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94095140c7fde550ULL;
  static const uint64_t static_value2 = 0x8eeca8261235bdf7ULL;
};

template<class ContainerAllocator>
struct DataType< ::wall_seg::WallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wall_seg/WallInfo";
  }

  static const char* value(const ::wall_seg::WallInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wall_seg::WallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint8 wall_id\n"
"geometry_msgs/Point corner_position\n"
"float64 angle\n"
"geometry_msgs/Point centroid\n"
"geometry_msgs/Vector3 normal\n"
"geometry_msgs/Point min\n"
"geometry_msgs/Point max\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::wall_seg::WallInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wall_seg::WallInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.wall_id);
      stream.next(m.corner_position);
      stream.next(m.angle);
      stream.next(m.centroid);
      stream.next(m.normal);
      stream.next(m.min);
      stream.next(m.max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WallInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wall_seg::WallInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wall_seg::WallInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "wall_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wall_id);
    s << indent << "corner_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.corner_position);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid);
    s << indent << "normal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.normal);
    s << indent << "min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALL_SEG_MESSAGE_WALLINFO_H
